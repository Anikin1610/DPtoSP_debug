$version Generated by VerilatedVcd $end
$date Wed Jul  7 23:59:26 2021 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 B control [0:0] $end
  $var wire  5 I exceptionFlags [4:0] $end
  $var wire 65 C in [64:0] $end
  $var wire 33 G out [32:0] $end
  $var wire  3 F roundingMode [2:0] $end
  $scope module recFNToRecFN $end
   $var wire  1 B control [0:0] $end
   $var wire  5 I exceptionFlags [4:0] $end
   $var wire 65 C in [64:0] $end
   $var wire  1 # isInf $end
   $var wire  1 J isNaN $end
   $var wire  1 & isSigNaN $end
   $var wire  1 K isZero $end
   $var wire 33 G out [32:0] $end
   $var wire  3 F roundingMode [2:0] $end
   $var wire 13 M sExpIn [12:0] $end
   $var wire 54 $ sigIn [53:0] $end
   $var wire  1 L sign $end
   $scope module genblk1 $end
    $scope module roundRawInToOut $end
     $var wire 32 l adjustedExpWidth [31:0] $end
     $var wire 27 ) adjustedSig [26:0] $end
     $var wire  1 / commonCase $end
     $var wire  9 * common_expOut [8:0] $end
     $var wire 23 + common_fractOut [22:0] $end
     $var wire  1 . common_inexact $end
     $var wire  1 , common_overflow $end
     $var wire  1 - common_totalUnderflow $end
     $var wire  1 Z common_underflow $end
     $var wire  1 B control [0:0] $end
     $var wire  1 i doShiftSigDown1 $end
     $var wire 32 e effectiveInSigWidth [31:0] $end
     $var wire  5 I exceptionFlags [4:0] $end
     $var wire  9 ] expOut [8:0] $end
     $var wire 23 ^ fractOut [22:0] $end
     $var wire 32 d inExpWidth [31:0] $end
     $var wire 32 e inSigWidth [31:0] $end
     $var wire  1 # in_isInf $end
     $var wire  1 J in_isNaN $end
     $var wire  1 K in_isZero $end
     $var wire 13 M in_sExp [12:0] $end
     $var wire 54 $ in_sig [53:0] $end
     $var wire  1 L in_sign $end
     $var wire  1 1 inexact $end
     $var wire  1 i infiniteExc $end
     $var wire  1 & invalidExc $end
     $var wire  1 ( isNaNOut $end
     $var wire  1 k neverOverflows [0:0] $end
     $var wire  1 k neverUnderflows [0:0] $end
     $var wire  1 5 notNaN_isInfOut $end
     $var wire  1 # notNaN_isSpecialInfOut $end
     $var wire 32 h options [31:0] $end
     $var wire 33 G out [32:0] $end
     $var wire 32 f outExpWidth [31:0] $end
     $var wire 32 n outInfExp [31:0] $end
     $var wire 32 o outMaxFiniteExp [31:0] $end
     $var wire 32 q outMinNonzeroExp [31:0] $end
     $var wire 32 p outMinNormExp [31:0] $end
     $var wire 32 m outNaNExp [31:0] $end
     $var wire 32 g outSigWidth [31:0] $end
     $var wire  1 0 overflow $end
     $var wire  1 2 overflow_roundMagUp $end
     $var wire  1 4 pegMaxFiniteMagOut $end
     $var wire  1 3 pegMinNonzeroMagOut $end
     $var wire  1 i propagateNaNPayload $end
     $var wire  1 ' roundMagUp $end
     $var wire  3 F roundingMode [2:0] $end
     $var wire  1 V roundingMode_max $end
     $var wire  1 U roundingMode_min $end
     $var wire  1 T roundingMode_minMag $end
     $var wire  1 S roundingMode_near_even $end
     $var wire  1 W roundingMode_near_maxMag $end
     $var wire  1 X roundingMode_odd $end
     $var wire 14 Y sAdjustedExp [13:0] $end
     $var wire  1 j sigMSBitAlwaysZero [0:0] $end
     $var wire  1 \ signOut $end
     $var wire  1 [ underflow $end
     $scope module genblk2 $end
      $var wire  1 < anyRound $end
      $var wire  1 ; anyRoundExtra $end
      $var wire  1 A roundCarry $end
      $var wire  1 _ roundIncr $end
      $var wire 27 6 roundMask [26:0] $end
      $var wire  1 : roundPosBit $end
      $var wire 27 9 roundPosMask [26:0] $end
      $var wire 26 = roundedSig [25:0] $end
      $var wire 15 ` sExtAdjustedExp [14:0] $end
      $var wire 15 > sRoundedExp [14:0] $end
      $var wire 27 8 shiftedRoundMask [26:0] $end
      $var wire  1 @ unboundedRange_anyRound $end
      $var wire  1 a unboundedRange_roundIncr $end
      $var wire  1 ? unboundedRange_roundPosBit $end
      $scope module genblk1 $end
       $var wire 25 7 roundMask_main [24:0] $end
       $scope module lowMask_roundMask $end
        $var wire 32 p bottomBound [31:0] $end
        $var wire 513 u c [512:0] $end
        $var wire  9 b in [8:0] $end
        $var wire 32 r inWidth [31:0] $end
        $var wire 32 t numInVals [31:0] $end
        $var wire 25 7 out [24:0] $end
        $var wire 25 c reverseOut [24:0] $end
        $var wire 32 s topBound [31:0] $end
        $scope module reverse $end
         $var wire 25 c in [24:0] $end
         $var wire 25 7 out [24:0] $end
         $var wire 32 (! width [31:0] $end
        $upscope $end
       $upscope $end
      $upscope $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module inToRawIn $end
    $var wire 12 N exp [11:0] $end
    $var wire 32 d expWidth [31:0] $end
    $var wire 52 O fract [51:0] $end
    $var wire 65 C in [64:0] $end
    $var wire  1 # isInf $end
    $var wire  1 J isNaN $end
    $var wire  1 Q isSpecial $end
    $var wire  1 K isZero $end
    $var wire 13 M sExp [12:0] $end
    $var wire 54 $ sig [53:0] $end
    $var wire 32 e sigWidth [31:0] $end
    $var wire  1 L sign $end
   $upscope $end
   $scope module isSigNaNIn $end
    $var wire 32 d expWidth [31:0] $end
    $var wire 65 C in [64:0] $end
    $var wire  1 R isNaN $end
    $var wire  1 & isSigNaN $end
    $var wire 32 e sigWidth [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b010111110110011010101011011001001101000100000110101000 $
0&
0'
0(
b010111110110011010101011011 )
b010001001 *
b01111101100110101010111 +
0,
0-
1.
1/
00
11
12
03
04
05
b000000000000000000000000011 6
b0000000000000000000000000 7
b000000000000000000000000001 8
b000000000000000000000000010 9
1:
1;
1<
b00101111101100110101010111 =
b111111010001001 >
1?
1@
0A
1B
b00101100010010111110110011010101011011001001101000100000110101000 C
b000 F
b001000100101111101100110101010111 G
b00001 I
0J
0K
0L
b0010110001001 M
b010110001001 N
b0111110110011010101011011001001101000100000110101000 O
0Q
0R
1S
0T
0U
0V
0W
0X
b11111010001001 Y
0Z
0[
0\
b010001001 ]
b01111101100110101010111 ^
1_
b111111010001001 `
1a
b010001001 b
b0000000000000000000000000 c
b00000000000000000000000000001011 d
b00000000000000000000000000110101 e
b00000000000000000000000000001000 f
b00000000000000000000000000011000 g
b00000000000000000000000000000001 h
0i
1j
0k
b00000000000000000000000000001110 l
b00000000000000000000000111000000 m
b00000000000000000000000110000000 n
b00000000000000000000000101111111 o
b00000000000000000000000010000010 p
b00000000000000000000000001101011 q
b00000000000000000000000000001001 r
b00000000000000000000000001101001 s
b00000000000000000000001000000000 t
bu
b00000000000000000000000000011001 (!
#1
#2
#3
#4
#5
#6
#7
#8
#9
#10
#11
#12
#13
#14
#15
#16
#17
#18
#19
