//
// Generated by Bluespec Compiler (build 65170db5)
//
// On Sat Jun 26 13:53:06 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module tb_rectorec(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register state
  reg [31 : 0] state;
  wire [31 : 0] state$D_IN;
  wire state$EN;

  // ports of submodule dut
  wire [64 : 0] dut$request_in;
  wire [32 : 0] dut$oout;
  wire [4 : 0] dut$oexceptionFlags;
  wire [2 : 0] dut$request_roundingmode;
  wire dut$request_control;

  // rule scheduling signals
  wire CAN_FIRE_RL_disp_out,
       CAN_FIRE_RL_inputs,
       WILL_FIRE_RL_disp_out,
       WILL_FIRE_RL_inputs;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h184;
  reg [63 : 0] v__h248;
  reg [63 : 0] v__h299;
  // synopsys translate_on

  // submodule dut
  mkRecToRec_instance dut(.CLK(CLK),
			  .RST_N(RST_N),
			  .request_control(dut$request_control),
			  .request_in(dut$request_in),
			  .request_roundingmode(dut$request_roundingmode),
			  .oout(dut$oout),
			  .oexceptionFlags(dut$oexceptionFlags),
			  .RDY_oexceptionFlags());

  // rule RL_inputs
  assign CAN_FIRE_RL_inputs = state == 32'd0 ;
  assign WILL_FIRE_RL_inputs = CAN_FIRE_RL_inputs ;

  // rule RL_disp_out
  assign CAN_FIRE_RL_disp_out = state == 32'd1 ;
  assign WILL_FIRE_RL_disp_out = CAN_FIRE_RL_disp_out ;

  // register state
  assign state$D_IN = state + 32'd1 ;
  assign state$EN = CAN_FIRE_RL_inputs ;

  // submodule dut
  assign dut$request_control = 1'b1 ;
  assign dut$request_in = 65'h05897D9AAD93441A8 ;
  assign dut$request_roundingmode = 3'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        state <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    state = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inputs)
	begin
	  v__h184 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inputs)
	$display(v__h184, " Input = %b", 65'h05897D9AAD93441A8);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_disp_out)
	begin
	  v__h248 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_disp_out)
	$display(v__h248, " Result_Bluespec = %h", dut$oout);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_disp_out)
	begin
	  v__h299 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_disp_out)
	$display(v__h299, " Flags = %b", dut$oexceptionFlags);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_disp_out) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // tb_rectorec

